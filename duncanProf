# ANSI color codes \o/
RS="\[\033[0m\]"    # reset
HC="\[\033[1m\]"    # hicolor
UL="\[\033[4m\]"    # underline
INV="\[\033[7m\]"   # inverse background and foreground
FBLK="\[\033[30m\]" # foreground black
FRED="\[\033[31m\]" # foreground red
FGRN="\[\033[32m\]" # foreground green
FYEL="\[\033[33m\]" # foreground yellow
FBLE="\[\033[34m\]" # foreground blue
FMAG="\[\033[35m\]" # foreground magenta
FCYN="\[\033[36m\]" # foreground cyan
FWHT="\[\033[37m\]" # foreground white
BBLK="\[\033[40m\]" # background black
BRED="\[\033[41m\]" # background red
BGRN="\[\033[42m\]" # background green
BYEL="\[\033[43m\]" # background yellow
BBLE="\[\033[44m\]" # background blue
BMAG="\[\033[45m\]" # background magenta
BCYN="\[\033[46m\]" # background cyan
BWHT="\[\033[47m\]" # background white

# My prompt
# This is the first one I made
# For historical purposes
# PS1="\`if [ \$? = 0 ]; then echo $FCYN; else echo $FRED; fi \`[\w]\\$ $RS"

TERM_WIDTH=0
HORZ_LINE=""

# begin the actual prompt function. Yes, all of this
function myPrompt {
# ====================================================

RET=$? # Set to exit code of last command
MYCLR=""

# If the last command returns with an exit code other than zero
# turn the prompt red
# else it should be a nice shade of teal
if [ $RET != 0 ]; then
	MYCLR=$FRED
else
	MYCLR=$FCYN
fi

# Check if the window has changed width
# If so, adjust the line separator to fill it
if [ $TERM_WIDTH != $COLUMNS ]; then
	TERM_WIDTH=$COLUMNS
	HORZ_LINE=""

	for (( c=1; c<=$COLUMNS; c++)); do
		HORZ_LINE+="_"
	done
fi

# Print the line separator
echo $HORZ_LINE


# I'll admit I'm not totally sure how this part works
# Basically it checks if we're in a git repo
# If so, it'll grab the name of the branch we're on
parse_git_branch() {
     git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}


# This is the actual prompt that gets displayed
# Shows the current directory
# and info about the git repo, if we're in one
IN_REPO=$(parse_git_branch)

if [ "$IN_REPO" != "" ]; then
	PS1="$MYCLR[\w]$HC$FGRN$(parse_git_branch)$RS$MYCLR\\$ $RS"
else
	PS1="$MYCLR[\w]\\$ $RS"
fi

# ====================================================
}
# end function myPrompt

PROMPT_COMMAND=myPrompt

# I hate the way you have to call java from the terminal
# So for lack of a better place to stick it, here's this:
export CLASSPATH=./..
# Basically if I try to call a java program, it'll attempt
# to do so from the parent dir of wherever I am


# To affirm that this file was successfully loaded
# echo duncanProf loaded
# Actually, because I'm very Extra:
echo "                         ,,    ,,                      ,           ";
echo "\`7MMF'  \`7MMF'         \`7MM  \`7MM                      |   .       ";
echo "  MM      MM             MM    MM               \`.  *  |     .'    ";
echo "  MM      MM   .gP\"Ya    MM    MM   ,pW\"Wq.       \`. ._|_* .'  .   ";
echo "  MMmmmmmmMM  ,M'   Yb   MM    MM  6W'   \`Wb    . * .'   \`.  *     ";
echo "  MM      MM  8M\"\"\"\"\"\"   MM    MM  8M     M8  ------|     |------  ";
echo "  MM      MM  YM.    ,   MM    MM  YA.   ,A9    .  *\`.___.' *  .   ";
echo ".JMML.  .JMML. \`Mbmmd' .JMML..JMML. \`Ybmd9'        .'  |* \`.  *    ";
echo "                                                 .' *  |  . \`.     ";
echo "\`7MM\"\"\"Yb.                                           . |           ";
echo "  MM    \`Yb.                                           '           ";
echo "  MM     \`Mb \`7MM  \`7MM  \`7MMpMMMb.   ,p6\"bo   ,6\"Yb.  \`7MMpMMMb.  ";
echo "  MM      MM   MM    MM    MM    MM  6M'  OO  8)   MM    MM    MM  ";
echo "  MM     ,MP   MM    MM    MM    MM  8M        ,pm9MM    MM    MM  ";
echo "  MM    ,dP'   MM    MM    MM    MM  YM.    , 8M   MM    MM    MM  ";
echo ".JMMmmmdP'     \`Mbod\"YML..JMML  JMML. YMbmd'  \`Moo9^Yo..JMML  JMML.";
